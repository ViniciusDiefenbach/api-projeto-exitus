generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String             @id @default(uuid())
  active        Boolean
  name          String
  email         String             @unique
  password      String
  fingerprint   String             @unique
  enrollment    String?            @unique
  birth         DateTime?          @db.Date
  shift         Shift?
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  guardeds      GuardRelation[]    @relation("guardians")
  guardians     GuardRelation[]    @relation("guardeds")
  roles         UserRoleRelation[]
  registers     Register[]
  refresh_token RefreshToken[]

  @@map("users")
}

model UserRoleRelation {
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  role       Role     @relation(fields: [role_id], references: [id])
  role_id    String
  created_at DateTime @default(now())

  @@id([user_id, role_id])
  @@map("user_role_relations")
}

model Role {
  id         String             @id @default(uuid())
  role_type  RoleType           @unique
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  users      UserRoleRelation[]

  @@map("roles")
}

model GuardRelation {
  guarded     User        @relation("guardeds", fields: [guarded_id], references: [id])
  guarded_id  String
  guardian    User        @relation("guardians", fields: [guardian_id], references: [id])
  guardian_id String
  created_at  DateTime    @default(now())
  early_exits EarlyExit[]

  @@id([guarded_id, guardian_id])
  @@map("guard_relations")
}

model EarlyExit {
  id             String        @id @default(uuid())
  start_at       DateTime      @default(now()) @db.Date
  end_at         DateTime      @db.Date
  time           DateTime      @db.Time()
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  guard_relation GuardRelation @relation(fields: [guarded_id, guardian_id], references: [guarded_id, guardian_id])
  guarded_id     String
  guardian_id    String

  @@map("early_exits")
}

model Register {
  id            String       @id @default(uuid())
  register_type RegisterType
  time          DateTime     @default(now()) @db.Timestamp()
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  user          User         @relation(fields: [user_id], references: [id])
  user_id       String

  @@map("registers")
}

model RefreshToken {
  id           String   @id @default(uuid())
  created_at   DateTime @default(now())
  expires_at   DateTime @db.Timestamp()
  choosed_role RoleType
  user         User     @relation(fields: [user_id], references: [id])
  user_id      String

  @@map("refresh_tokens")
}

enum RegisterType {
  IN
  OUT
}

enum RoleType {
  ADMIN
  GUARDED
  GUARDIAN
  EMPLOYEE
}

enum Shift {
  MORNING
  AFTERNOON
  NIGHT
}
