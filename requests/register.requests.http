### 1. Create a register

// JSON body

// register_type: optional (could be IN or OUT) (apply some logic if register_type is not provided)
// user: required (the user id that is doing the register)
// time: optional (the time that the register was made) (get now() by default)

POST http://localhost:3000/register HTTP/1.1
Content-Type: application/json

{
    "time": "2021-08-01T00:00:00.000Z",
    "user_id": "7111ce04-9632-4c40-8038-a8845992b404"
}

// 2. Get all the registers

// Page query param

// page: optional (recive 0 by default)
// limit: optional (recive 8 by default)

###
GET http://localhost:3000/register HTTP/1.1

###
GET http://localhost:3000/register?page=1 HTTP/1.1

###
GET http://localhost:3000/register?limit=1 HTTP/1.1

###
GET http://localhost:3000/register?page=1&limit=1 HTTP/1.1

// Filter query param

// register_type: optional (could be IN or OUT)
// user_id: optional (the user id that is doing the register)
// start_time: optional (the start date to filter the registers)
// end_time: optional (the end date to filter the registers)

###
GET http://localhost:3000/register?register_type=IN HTTP/1.1

###
GET http://localhost:3000/register?user_id=7111ce04-9632-4c40-8038-a8845992b404 HTTP/1.1

###
GET http://localhost:3000/register?start_time=2021-08-02T00:00:00.000Z HTTP/1.1

###
GET http://localhost:3000/register?end_time=2021-08-02T00:00:00.000 HTTP/1.1

###
GET http://localhost:3000/register?start_time=2021-08-01T00:00:00.000&end_time=2021-08-02T00:00:00.000 HTTP/1.1

### 3. Get a register by id
GET http://localhost:3000/register/<uuid> HTTP/1.1

### 4. Update a register
PATCH http://localhost:3000/register/<uuid> HTTP/1.1
Content-Type: application/json

{
  "register_type": "OUT"
}

### 5. Delete a register
DELETE http://localhost:3000/register/<uuid> HTTP/1.1
